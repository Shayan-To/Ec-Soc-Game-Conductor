// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Player {
    id       Int    @id @default(autoincrement())
    name     String
    password String
    picture  Bytes

    exchangeWhereSender   Exchange[] @relation("Exchange_sender")
    exchangeWhereReceiver Exchange[] @relation("Exchange_receiver")

    firms FirmOwnership[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    createdById String
}

model Exchange {
    id Int @id @default(autoincrement())

    month Int

    action String

    receiverId  Int
    receiver    Player     @relation("Exchange_receiver", fields: [receiverId], references: [id])
    senderId    Int?
    sender      Player?    @relation("Exchange_sender", fields: [senderId], references: [id])
    firmCycleId Int?
    firmCycle   FirmCycle? @relation(fields: [firmCycleId], references: [id])

    receivedCoin   Int
    receivedFood   Int
    receivedLumber Int
    receivedIron   Int

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    createdById String

    @@index([month, senderId, receiverId])
}

model FirmType {
    id Int @id @default(autoincrement())

    name String

    buildTimeMonths Int

    monthlyCostCoin   Int
    monthlyCostFood   Int
    monthlyCostLumber Int
    monthlyCostIron   Int

    costCoin   Int
    costFood   Int
    costLumber Int
    costIron   Int

    productionCoinMean         Int
    productionCoinStdDevPerc   Int
    productionFoodMean         Int
    productionFoodStdDevPerc   Int
    productionLumberMean       Int
    productionLumberStdDevPerc Int
    productionIronMean         Int
    productionIronStdDevPerc   Int

    firms  Firm[]
    cycles FirmCycle[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    createdById String
}

model FirmCycle {
    id Int @id @default(autoincrement())

    month Int

    firmTypeId Int
    firmType   FirmType @relation(fields: [firmTypeId], references: [id])

    coinProduction   Int
    foodProduction   Int
    lumberProduction Int
    ironProduction   Int

    exchanges Exchange[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    createdById String
    failedfirms FirmCycleFail[]

    @@index([month])
}

model Firm {
    id Int @id @default(autoincrement())

    typeId Int
    type   FirmType @relation(fields: [typeId], references: [id])

    builtAtMonth    Int
    activeFromMonth Int

    level       Int
    prevLevelId Int?
    prevLevel   Firm?  @relation("Firm_prevLevel", fields: [prevLevelId], references: [id])
    nextLevel   Firm[] @relation("Firm_prevLevel")

    ownerships FirmOwnership[]
    fails      FirmCycleFail[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    createdById String
}

model FirmCycleFail {
    id Int @id @default(autoincrement())

    firmCycleId Int?
    firmCycle   FirmCycle? @relation(fields: [firmCycleId], references: [id])
    firmId      Int
    firm        Firm       @relation(fields: [firmId], references: [id])

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    createdById   String
    FirmOwnership FirmOwnership[]
}

model FirmOwnership {
    id Int @id @default(autoincrement())

    firmId   Int
    firm     Firm   @relation(fields: [firmId], references: [id])
    playerId Int
    player   Player @relation(fields: [playerId], references: [id])

    ownershipPerc Int

    monthlyCostCoin   Int
    monthlyCostFood   Int
    monthlyCostLumber Int
    monthlyCostIron   Int

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    createdById     String
    FirmCycleFail   FirmCycleFail? @relation(fields: [firmCycleFailId], references: [id])
    firmCycleFailId Int?
}

model EnvConfig {
    id    Int    @id @default(autoincrement())
    key   String
    value String

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    createdById String

    @@index([key])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    phoneNumber   String    @unique
    image         String?
    features      String    @default("|") @db.Text
    accounts      Account[]
    sessions      Session[]

    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    createdById String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
